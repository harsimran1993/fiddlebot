/*Variable area*/
var Discord = require('discord.io');
var bot = new Discord.Client({
	token: "MjMxNjUwNDEyMjc5NzU4ODQ4.CtEcjA.C1X38L0f5jiIj2rNYwFayMf8DaU",
	autorun: true
});

//externals
var date = new Date();				//system date
var request = require('request');	//url request
var fs = require('fs');				//file system

//booleans 
//used by the system to check if the message is already sent to avoid sending same reminder multiple times or try autoconnect the server
var notification = {
	meeting: false,
	shutdown: false,
	tuesminimeet:false,
	newsletterremind:false
}
//server & channel ids
var Workinsofunsober = "177121588959772672";
var bottest = "232968431241003009";
var notifychn = bottest;
var serverID ="176888462543159297";

//userID
var harsim = "201054105441927168";
var bjeorn = "177109767460880388";
var aaron = "175868488215298048";
var King = harsim;

//cookiejarlist
var cookies = {};
var importedJSON;

/*Event area*/

bot.on("ready", function(event) {
	console.log("Connected!");
	console.log("Logged in as: ");
	console.log(bot.username + " - (" + bot.id + ")");
	readFile();
	//console.log(bot.servers[serverID].members);
	//bot online message
	sendMessages(notifychn, ["Fiddle-Bot comes Online!!"]);
});

bot.on("message", function(user, userID, channelID, message, event) {
	console.log(user + " - " + userID);
	console.log("in " + channelID);
	console.log(message);
	console.log("----------");
		
	try{
	//split input string 
	var split = message.split(" ");
	if(split.length > 1 )
		var beheaded = message.substr(split[0].length + split[1].length + 2 , message.length);
	//ping
	if (split[0] === "!ping") {
		sendMessages(channelID, ["Pong"]); 			//Sending a message with our helper function
	} else if (split[0] === "!picture") {
		sendFiles(channelID , ["fillsquare.png"]); 	//Sending a file with our helper function
	} else if (split[0] === "!echo"){				//echo your message after sometime
		sendMessages(channelID , [beheaded],split[1] * 1000);
	} else if(split[0] === "!fiddleBYE"){			//not putting bot offline requires rerun form server side (node bot)
		notification.shutdown = true;
		bot.disconnect();
	} else if(split[0] === "!HELP"){					//list of available commands
		sendMessages(channelID , ["commands are \n1. !ping \n2. !echo after-time-number your-message \n3. !fiddleBYE \n4. !cookie amount @user \n5. !givejar @user \n6. !myjar \n7. !passKing @user\n8. !whoKing\n9. !joke"]);
	} else if(split[0] === "!cookie"){				//give cookies ti the specified user via @
		if(split.length > 2){
			split[2] = split[2].replace("<" , "");
			split[2] = split[2].replace(">" , "");
			split[2] = split[2].replace("@" , "");
			if(userID == King){
				giveKingCookies(parseInt( split[1] ) , split[2]);
				saveToFile(cookies);
			}else if( cookies[ userID ] >= parseInt( split[1] )){
				giveCookies(parseInt( split[1] ) , split[2] , userID);
				saveToFile(cookies);
			} else{
				sendMessages(channelID , ["insuffiecent cookies in jar to share your have:" + cookies[userID]]);
				sendMessages(channelID , ["insuffiecent cookies in jar to share your have:" + cookies[userID]]);
			}
		}
	} else if(split[0] === "!myjar"){
		readFile();
		console.log(cookies[userID]);
		//sendMessages(channelID , [ "The Jar contains:" + cookies[userID] ]);
		sendFiles(channelID , [ "cookie.png" ] ,1000, "<@"+userID+">'s Jar contains : " + cookies[userID] );
	} else if(split[0] === "!givejar"){
		if(userID === King){
			if(split.length > 1 && ! cookies[split[1]]){
				split[1] = split[1].replace("<" , "");
				split[1] = split[1].replace(">" , "");
				split[1] = split[1].replace("@" , "");
				cookies[split[1]] = 10;
				saveToFile(cookies);
			}
		} else{
			sendMessages(channelID , ["only King:<@"+bot.servers[serverID].members[King].username+"> stocks enough jars to give"]);
		}
		
	} else if(split[0] === "!passKing"){
		if(userID === King){
			split[1] = split[1].replace("<" , "");
			split[1] = split[1].replace(">" , "");
			split[1] = split[1].replace("@" , "");
			split[1] = split[1].replace("!" , "");
			King = split[1];
			sendMessages(channelID , [ "current King is:<@"+King+">" ] );
			//sendMessages(channelID , [ "current King is:<"+bot.servers[serverID].members[King].username+">" ] );
			//console.log(King);
		} else{
			sendMessages(channelID , ["your are not throned enough"]);
		}
	} else if(split[0] === "!whoKing")
	{
		sendMessages(channelID , [ "current King is: <@"+King+"> " ] );
		//sendMessages(channelID , [ "current King is: <@"+bot.servers[serverID].members[King].username+"> " ] );
	} else if(split[0] ==="!joke"){
			request('http://tambal.azurewebsites.net/joke/random', function (error, response, body) {
			if (!error && response.statusCode == 200) {
				importedJSON = JSON.parse(body);
				sendMessages(channelID , [""+importedJSON['joke']]);
				console.log(importedJSON);
			}
			});
	} else if(split[0] === "!peekjar"){
			if(split.length > 1){
				split[1] = split[1].replace("<" , "");
				split[1] = split[1].replace(">" , "");
				split[1] = split[1].replace("@" , "");
				readFile();
				console.log(cookies[userID]);
				//sendMessages(channelID , [ "The Jar contains:" + cookies[userID] ]);
				sendFiles(channelID , [ "cookie.png" ] ,1000, "<@"+split[1]+">'s Jar contains : " + cookies[split[1]] );
			}
		}
	}
	catch(err){
		console.log(err.message);
	}
		
});

bot.on("presence", function(user, userID, status, game, event) {
	console.log(user + " is now: " + status);
});

bot.on("any", function(event) {
		switch(date.getDay())
		{
			//saturday reminder for meeting
			case 6: if(date.getHours()>=22){
						if(notification.meeting === false){
							sendMessages(notifychn, ["Hope <@everyone> has a great weekend! see you guys tomorrow Sunday at 1 pm EST for the meeting. :smiley:"]);
							notification.meeting = true;
							console.log("reminder Reset");
						}
					}
					break;
			//tuesday reminder for minimeet
			case 2: if(notification.tuesminimeet === false){
						sendMessages(notifychn, ["tuesday meeting reminder"]);
						notification.tuesminimeet = true;
						console.log("reminder Reset");
					}					
					break;
			//thursday newsleeter reminder
			case 4:if(notification.newsletterremind === false){
						sendMessages(notifychn, ["newsletter has been sent"]);
						notification.newsletterremind  = true;
						console.log("reminder Reset");
					}
					break;
			default: if(notification.meeting === true){
						notification.meeting = false;
						console.log("meeting reminder set");
					}
					if(notification.tuesminimeet === true)
					{
						notification.tuesminimeet = false;
						console.log("minimeet reminder set");
					}
					if(notification.newsletterremind === true)
					{
						notification.newsletterremind = false;
						console.log("newsletterreminder set");
					}					
					break;
		}
});

bot.on("disconnect", function() {
	console.log("Bot disconnected");
	//bot offline message
	sendMessages(notifychn , ["Fiddle-bot shutsDown"]);
	//incase connection lost reconnect
	//if(!notification.shutdown)
	//bot.connect(); //Auto reconnect
});

bot.on('err', function(error) {
	console.log(error);
});
/*bot.on('debug', function(rawEvent) {
	console.log(rawEvent);
});*/
/*Function declaration area*/
function sendMessages(ID, messageArr, interval) {
	var resArr = [], len = messageArr.length;
	var callback = typeof(arguments[2]) === 'function' ?  arguments[2] :  arguments[3];
	if (typeof(interval) !== 'number') interval = 1000;

	function _sendMessages() {
		setTimeout(function() {
			if (messageArr[0]) {
				bot.sendMessage({
					to: ID,
					message: messageArr.shift()
				}, function(err, res) {
					resArr.push(err || res);
					if (resArr.length === len) if (typeof(callback) === 'function') callback(resArr);
				});
				_sendMessages();
			}
		}, interval);
	}
	_sendMessages();
}

function sendFiles(channelID, fileArr, interval, message) {
	var resArr = [], len = fileArr.length;
	var callback = typeof(arguments[2]) === 'function' ? arguments[2] : arguments[3];
	if (typeof(interval) !== 'number') interval = 1000;
	//if (typeof(message) !== 'String') message = "blank";

	function _sendFiles() {
		setTimeout(function() {
			if (fileArr[0]) {
				bot.uploadFile({
					to: channelID,
					file: fileArr.shift(),
					message: message
				}, function(err, res) {
					resArr.push(err || res);
					if (resArr.length === len) if (typeof(callback) === 'function') callback(resArr);
				});
				_sendFiles();
			}
		}, interval);
	}
	_sendFiles();
}

function giveCookies(amount,reciever,sender){
	if( typeof( amount )!== 'number' ) amount = 1;
	cookies[reciever] += amount;
	cookies[sender] -= amount;
	console.log( "cookie given" );
}

function giveKingCookies(amount , reciever){
	if(typeof(amount)!== 'number') amount = 1;
	if(amount > 10) {
		sendMessages(notifychn, ["Your majesty! your generosity of "+amount+" has been reduced to 10 cookies\nconsidering the national treasury terms of services"]);
		amount = 10;
	}
	cookies[reciever] += amount;
	console.log( "cookie given" );
}


function saveToFile(data)
{
	fs.writeFile("./cookiesfile.json", JSON.stringify(data), function(err) {
		if(err) {
			return console.log(err);
		}

		console.log("The file was saved!");
	}); 
}

function readFile()
{
	fs.readFile("./cookiesfile.json", 'utf8', function (err,data) {
	if (err) {
		return console.log(err);
	}
	cookies = JSON.parse(data);
	console.log("The file was parsed!");
	});
}